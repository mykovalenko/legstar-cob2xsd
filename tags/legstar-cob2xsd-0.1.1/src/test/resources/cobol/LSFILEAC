       PROCESS XOPTS(SP APOST)
       PROCESS NOSEQ LIB OPTIMIZE(FULL)
       IDENTIFICATION DIVISION.
       PROGRAM-ID. LSFILEAC.
      *****************************************************************
      * OVERVIEW                                                      *
      * --------                                                      *
      * DPL PROGRAM TO QUERY FILEA                                    *
      *  - There are 2 input containers and 2 output containers, none *
      *    of them mandatory.                                         *
      *                                                               *
      *                                                               *
      *****************************************************************
      *****************************************************************

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      *SOURCE-COMPUTER. IBM-390 WITH DEBUGGING MODE.
       DATA DIVISION.
      *****************************************************************
      *        W O R K I N G    S T O R A G E    S E C T I O N        *
      *****************************************************************
       WORKING-STORAGE SECTION.

       77  FILLER                 PIC X VALUE 'N'.
           88 DEBUG-MODE          VALUE 'Y'.
           
       01  FILEA.   COPY DFH0CFIL.
       01  W-FILENAME             PIC X(8) VALUE 'FILEA'.

       01  W-QUERY-DATA.
           05 W-QUERY-NAME        PIC X(20) VALUE '*'.
           05 W-QUERY-ADDRESS     PIC X(20) VALUE '*'.
           05 W-QUERY-PHONE       PIC X(8)  VALUE '*'.

       01  W-QUERY-LIMIT.
           05 W-MAX-ITEMS-READ    PIC 9(8) COMP-3 VALUE 200.
           05 W-MAX-ELAPSE-TIME   PIC 9(8) COMP-3 VALUE 10000.
       
       01  W-NUMBER               PIC 9(6)  VALUE ZERO.
       01  W-ITEMSCOUNT           PIC 9(8) COMP-3 VALUE ZERO.
       01  W-VISIT-MODE           PIC 9(4) COMP VALUE ZERO.
           88 COUNT-MODE          VALUE 0.
           88 LOAD-MODE           VALUE 1.
       01  W-NAME-MATCH           PIC 9(4) COMP VALUE ZERO.
           88 NO-MATCH            VALUE 0.
           88 MATCH               VALUE 1.
       01  W-RESP                 PIC S9(8) VALUE ZERO.
       01  W-RESP2                PIC S9(8) VALUE ZERO.
       01  W-I                    PIC S9(8) VALUE ZERO.
       01  W-L                    PIC 9(8) BINARY VALUE ZERO.
       01  W-START-TIME           PIC S9(15) COMP-3 VALUE ZERO.
       01  W-CURRENT-TIME         PIC S9(15) COMP-3 VALUE ZERO.
       01  W-STOP-TIME            PIC S9(15) COMP-3 VALUE ZERO.
       01  W-ELAPSE-TIME          PIC S9(15) COMP-3 VALUE ZERO.
       01  W-ITEMSREAD            PIC 9(8) COMP-3 VALUE ZERO.

       01  W-QUERYDATA-CTN-NAME   PIC X(16) VALUE 'QueryData'.
       01  W-QUERYLIMIT-CTN-NAME  PIC X(16) VALUE 'QueryLimit'.
       01  W-REPLYDATA-CTN-NAME   PIC X(16) VALUE 'ReplyData'.
       01  W-REPLYSTATUS-CTN-NAME PIC X(16) VALUE 'ReplyStatus'.

       01 REPLY-DATA.
          05 REPLY-ITEMSCOUNT     PIC 9(8) COMP-3.
          05 REPLY-ITEM OCCURS 1 TO 100 
             DEPENDING ON REPLY-ITEMSCOUNT.
             15 REPLY-NUMBER      PIC 9(6).
             15 REPLY-PERSONAL.
                20 REPLY-NAME     PIC X(20).
                20 REPLY-ADDRESS  PIC X(20).
                20 REPLY-PHONE    PIC X(8).
             15 REPLY-DATE        PIC X(8).
             15 REPLY-AMOUNT      PIC X(8).
             15 REPLY-COMMENT     PIC X(9).

       01 REPLY-STATUS.
          05 REPLY-TYPE           PIC 9(4) COMP VALUE 0.
             88 REPLY-SUCCESS     VALUE 0.
             88 REPLY-ERROR       VALUE 1.
          05 SEARCH-DURATION      PIC X(8) VALUE LOW-VALUES.
          05 TOTAL-ITEMS-READ     PIC 9(8) COMP-3 VALUE ZEROES.
          05 REPLY-RESP           PIC S9(8) COMP VALUE ZERO.
          05 REPLY-RESP2          PIC S9(8) COMP VALUE ZERO.
          05 REPLY-MESSAGE        PIC X(128) VALUE SPACES.
          
      *****************************************************************
      *            L I N K A G E       S E C T I O N                  *
      *****************************************************************
       LINKAGE SECTION.
       
       01 QUERY-DATA.
          05 QUERY-NAME                 PIC X(20).
          05 QUERY-ADDRESS              PIC X(20).
          05 QUERY-PHONE                PIC X(8).

       01 QUERY-LIMIT.
          05 MAX-ITEMS-READ             PIC 9(8) COMP-3.
          05 MAX-ELAPSE-TIME            PIC 9(8) COMP-3.
             
      *****************************************************************
      *    P R O C E D U R E  D I V I S I O N   S E C T I O N         *
      *****************************************************************
       PROCEDURE DIVISION.

           PERFORM PROLOG THRU END-PROLOG.
           
           SET COUNT-MODE TO TRUE.
           PERFORM VISIT-ITEMS THRU END-VISIT-ITEMS.
           IF (W-RESP NOT = DFHRESP(NORMAL))
               PERFORM HANDLE-ERROR THRU END-HANDLE-ERROR
           END-IF.

           SET LOAD-MODE TO TRUE.
           PERFORM VISIT-ITEMS THRU END-VISIT-ITEMS.
           IF (W-RESP NOT = DFHRESP(NORMAL))
               PERFORM HANDLE-ERROR THRU END-HANDLE-ERROR
           END-IF.
           
           PERFORM EPILOG THRU END-EPILOG.

           EXEC CICS RETURN END-EXEC.

           GOBACK.
           
      *---------------------------------------------------------------*
      * Read input containers and set query parameters accordingly.
      * If there is no QueryData container, consider all records must
      * be retrieved. If there is no limit container use default
      * limits.
      *
       PROLOG.
       
           EXEC CICS ASKTIME ABSTIME(W-START-TIME) END-EXEC.
       
           EXEC CICS GET CONTAINER(W-QUERYDATA-CTN-NAME)
                SET     (ADDRESS OF QUERY-DATA) FLENGTH(W-L)
                RESP    (W-RESP)
                RESP2   (W-RESP2)
           END-EXEC.
           
           IF (W-RESP = DFHRESP(NORMAL)
               AND W-L = LENGTH OF W-QUERY-DATA)
               MOVE QUERY-DATA TO W-QUERY-DATA
           END-IF.
          
           EXEC CICS GET CONTAINER(W-QUERYLIMIT-CTN-NAME)
                SET     (ADDRESS OF QUERY-LIMIT) FLENGTH(W-L)
                RESP    (W-RESP)
                RESP2   (W-RESP2)
           END-EXEC.
           
           IF (W-RESP = DFHRESP(NORMAL))
               AND W-L = LENGTH OF W-QUERY-LIMIT
               MOVE QUERY-LIMIT TO W-QUERY-LIMIT
           END-IF.
           
           INITIALIZE REPLY-ITEMSCOUNT.
           INITIALIZE REPLY-STATUS.
           
           IF DEBUG-MODE
               DISPLAY 'LSFILEAC STARTED WITH PARMS:'
               DISPLAY '  QUERY-NAME      :' W-QUERY-NAME
               DISPLAY '  QUERY-ADDRESS   :' W-QUERY-ADDRESS
               DISPLAY '  QUERY-PHONE     :' W-QUERY-PHONE
               DISPLAY '  MAX-ITEMS-READ  :' W-MAX-ITEMS-READ
               DISPLAY '  MAX-ELAPSE-TIME :' W-MAX-ELAPSE-TIME
           END-IF.
           
       END-PROLOG.   EXIT.
       
      *---------------------------------------------------------------*
      * This routine visits the items that satisfy the search criteria
      * in W-QUERY-DATA within the limits set in W-QUERY-LIMIT.
      * There are 2 modes of execution:
      * In count mode, the routine returns the number of hits
      * in W-ITEMSCOUNT.
      * In load mode, the routine populates the reply array.
      * W-RESP should be DFHRESP(NORMAL) on exit.
      *
       VISIT-ITEMS.
           IF LOAD-MODE
               SET REPLY-SUCCESS TO TRUE
               MOVE W-ITEMSCOUNT TO REPLY-ITEMSCOUNT
           END-IF.
           MOVE ZERO TO W-NUMBER W-ITEMSCOUNT W-ITEMSREAD.
           EXEC CICS STARTBR
                FILE    (W-FILENAME)
                RIDFLD  (W-NUMBER)
                RESP    (W-RESP)
                RESP2   (W-RESP2)
           END-EXEC.
           PERFORM UNTIL W-RESP NOT = DFHRESP(NORMAL) OR
              W-ITEMSREAD > W-MAX-ITEMS-READ OR
              W-ELAPSE-TIME > W-MAX-ELAPSE-TIME
              EXEC CICS READNEXT
                  INTO    (FILEA)
                  FILE    (W-FILENAME)
                  RIDFLD  (W-NUMBER)
                  RESP    (W-RESP)
                  RESP2   (W-RESP2)
              END-EXEC
              IF W-RESP = DFHRESP(NORMAL)
                  PERFORM CHECK-MATCH THRU END-CHECK-MATCH
                  IF MATCH
                      ADD 1 TO W-ITEMSCOUNT
                      IF LOAD-MODE
                          MOVE NUMB    TO REPLY-NUMBER (W-ITEMSCOUNT)
                          MOVE NAME    TO REPLY-NAME (W-ITEMSCOUNT)
                          MOVE ADDRX   TO REPLY-ADDRESS (W-ITEMSCOUNT)
                          MOVE PHONE   TO REPLY-PHONE (W-ITEMSCOUNT)
                          MOVE DATEX   TO REPLY-DATE( W-ITEMSCOUNT)
                          MOVE AMOUNT  TO REPLY-AMOUNT (W-ITEMSCOUNT)
                          MOVE COMMENT TO REPLY-COMMENT (W-ITEMSCOUNT)
                      END-IF
                  END-IF
                  ADD 1 TO W-ITEMSREAD
              END-IF
              EXEC CICS ASKTIME ABSTIME(W-CURRENT-TIME) END-EXEC
              COMPUTE W-ELAPSE-TIME = W-CURRENT-TIME - W-START-TIME
           END-PERFORM.
           EXEC CICS ENDBR
               FILE    (W-FILENAME)
               NOHANDLE
           END-EXEC.
           IF (W-RESP = DFHRESP(NOTFND) OR W-RESP = DFHRESP(ENDFILE))
               MOVE DFHRESP(NORMAL) TO W-RESP
           END-IF.
          
       END-VISIT-ITEMS.   EXIT.
       
      *---------------------------------------------------------------*
      * Check a given record against the W-QUERY-DATA.
      *
       CHECK-MATCH.
           SET MATCH TO TRUE.
           PERFORM VARYING W-I FROM 1 BY 1 UNTIL
                   W-I > LENGTH OF W-QUERY-NAME
                   OR W-QUERY-NAME (W-I:1) = '*'
                   OR NO-MATCH
               IF (NAME(W-I:1) NOT = W-QUERY-NAME (W-I:1))
                  SET NO-MATCH TO TRUE
               END-IF
           END-PERFORM.
           PERFORM VARYING W-I FROM 1 BY 1 UNTIL
                   W-I > LENGTH OF W-QUERY-ADDRESS
                   OR W-QUERY-ADDRESS (W-I:1) = '*'
                   OR NO-MATCH
               IF (ADDRX(W-I:1) NOT = W-QUERY-ADDRESS (W-I:1))
                  SET NO-MATCH TO TRUE
               END-IF
           END-PERFORM.
           PERFORM VARYING W-I FROM 1 BY 1 UNTIL
                   W-I > LENGTH OF W-QUERY-PHONE
                   OR W-QUERY-PHONE (W-I:1) = '*'
                   OR NO-MATCH
               IF (PHONE(W-I:1) NOT = W-QUERY-PHONE (W-I:1))
                  SET NO-MATCH TO TRUE
               END-IF
           END-PERFORM.
       END-CHECK-MATCH.  EXIT.
       
      *---------------------------------------------------------------*
      * Create a reply data container only if there is data to return.
      * The status container is returned in all cases. Since the
      * container status is used to notify client of potential errors
      * we let CICS abend the transaction if we are unable to create
      * that container.
      *
       EPILOG.
           IF REPLY-ITEMSCOUNT > 0
              EXEC CICS PUT CONTAINER(W-REPLYDATA-CTN-NAME)
                   FROM    (REPLY-DATA)
                   RESP    (W-RESP)
                   RESP2   (W-RESP2)
              END-EXEC
              IF (W-RESP NOT = DFHRESP(NORMAL))
                  PERFORM HANDLE-ERROR THRU END-HANDLE-ERROR
              END-IF
           ELSE
              MOVE 'NO CUSTOMER SATISFIES YOUR QUERY' TO REPLY-MESSAGE
           END-IF.

           EXEC CICS ASKTIME ABSTIME(W-STOP-TIME) END-EXEC.
           COMPUTE W-ELAPSE-TIME = W-STOP-TIME - W-START-TIME.
      * Normally we should send back the elapse time but since this will
      * be variable it complicates test automation on the client side so
      * send back zero instead.
      *    EXEC CICS FORMATTIME ABSTIME(W-ELAPSE-TIME)
      *         TIME(SEARCH-DURATION) TIMESEP
      *    END-EXEC.
           MOVE '00:00:00' TO SEARCH-DURATION.   
           MOVE W-ITEMSREAD TO TOTAL-ITEMS-READ.     

           EXEC CICS PUT CONTAINER(W-REPLYSTATUS-CTN-NAME)
                FROM    (REPLY-STATUS)
           END-EXEC.
           
       END-EPILOG.  EXIT.

      *---------------------------------------------------------------*
      * Something went wrong. Format an error reply.
      *
       HANDLE-ERROR.
           SET REPLY-ERROR TO TRUE.
           MOVE W-RESP TO REPLY-RESP.
           MOVE W-RESP2 TO REPLY-RESP2.
           EVALUATE W-RESP
               WHEN DFHRESP(FILENOTFOUND)
                    MOVE 'FILE NOT FOUND' TO REPLY-MESSAGE
               WHEN DFHRESP(INVREQ)
                    MOVE 'INVALID REQUEST' TO REPLY-MESSAGE
               WHEN DFHRESP(LENGERR)
                    MOVE 'LENGTH ERROR' TO REPLY-MESSAGE
               WHEN DFHRESP(NOTAUTH)
                    MOVE 'FILE NOT AUTHORIZED' TO REPLY-MESSAGE
               WHEN DFHRESP(NOTOPEN)
                    MOVE 'FILE NOT OPEN' TO REPLY-MESSAGE
               WHEN DFHRESP(CHANNELERR)
                    MOVE 'INVALID CHANNEL NAME' TO REPLY-MESSAGE
               WHEN DFHRESP(CONTAINERERR)
                    MOVE 'INVALID CONTAINER NAME' TO REPLY-MESSAGE
               WHEN OTHER
                    MOVE 'ERROR PROCESSING YOUR REQUEST'
                      TO REPLY-MESSAGE
           END-EVALUATE.
           EXEC CICS PUT CONTAINER(W-REPLYSTATUS-CTN-NAME)
                FROM    (REPLY-STATUS)
           END-EXEC.
           EXEC CICS RETURN END-EXEC.
       END-HANDLE-ERROR.  EXIT.

       END PROGRAM LSFILEAC.
